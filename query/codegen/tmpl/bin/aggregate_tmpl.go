package bin

import (
	"bytes"
	"compress/gzip"
	"io"
)

// aggregate_tmpl returns raw, uncompressed file data.
func aggregate_tmpl() []byte {
	gz, err := gzip.NewReader(bytes.NewBuffer([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x54, 0x91,
		0x51, 0x8e, 0xa3, 0x30, 0x0c, 0x86, 0xdf, 0x39, 0xc5, 0xaf, 0xbe, 0x14,
		0x56, 0x6d, 0x0f, 0xb0, 0x12, 0x37, 0x58, 0x69, 0x5f, 0xf6, 0x1d, 0x65,
		0xc1, 0x69, 0x33, 0x83, 0x1c, 0xe4, 0x98, 0xaa, 0x15, 0xea, 0x9c, 0x7d,
		0x9c, 0x40, 0x3b, 0x33, 0x12, 0x32, 0xb1, 0xf1, 0xff, 0xfb, 0x73, 0x58,
		0x96, 0x81, 0x7c, 0x60, 0xc2, 0xce, 0x9d, 0xcf, 0x42, 0x67, 0xa7, 0xb4,
		0x7b, 0x3c, 0xaa, 0x8a, 0x6e, 0x41, 0x3b, 0x12, 0x89, 0x82, 0x16, 0x8b,
		0x15, 0x8e, 0x47, 0xfc, 0x89, 0x71, 0x4a, 0x88, 0x57, 0x12, 0x90, 0x85,
		0x7b, 0x8e, 0xac, 0xf0, 0xf1, 0x99, 0xc7, 0xff, 0x6f, 0xd4, 0xeb, 0x09,
		0xff, 0x2e, 0x21, 0xc1, 0x1e, 0x99, 0x19, 0x91, 0x7b, 0xc2, 0x44, 0x92,
		0x0d, 0x12, 0xc9, 0x75, 0x24, 0x3d, 0x55, 0x7e, 0xe6, 0x5e, 0x43, 0x64,
		0xa4, 0xf7, 0x7b, 0xf7, 0x1a, 0x5c, 0x77, 0xfd, 0x2c, 0x29, 0xca, 0x01,
		0x83, 0x53, 0xd7, 0x54, 0xc0, 0x9a, 0x1b, 0x81, 0xf7, 0xe1, 0xd4, 0xbb,
		0xa4, 0xf5, 0x3e, 0x2b, 0xd6, 0x72, 0xa7, 0xbf, 0xf6, 0x07, 0x6c, 0x49,
		0xee, 0x0e, 0xbe, 0x08, 0xd1, 0xb6, 0xe0, 0x30, 0x42, 0x2f, 0xc4, 0x5b,
		0xc1, 0x36, 0x00, 0xf1, 0xb0, 0xf6, 0xac, 0x82, 0xdf, 0x3e, 0x48, 0xd2,
		0xbf, 0x85, 0xb8, 0x6e, 0x4a, 0xb3, 0x7d, 0x06, 0x84, 0x26, 0x72, 0x5a,
		0x8e, 0x40, 0x52, 0xa7, 0x73, 0x3a, 0xc0, 0x2e, 0xc2, 0x4c, 0xa6, 0xde,
		0x8d, 0x63, 0xfd, 0x64, 0x37, 0xd1, 0x17, 0xf9, 0x0f, 0xf0, 0x3c, 0xaa,
		0xd9, 0x1c, 0x6c, 0x1e, 0x47, 0xdd, 0x8c, 0xe0, 0x78, 0x28, 0x5e, 0x1f,
		0x2d, 0xbe, 0x5d, 0x70, 0x01, 0x2d, 0xc7, 0xda, 0x62, 0xb3, 0x91, 0x02,
		0x33, 0xab, 0xad, 0x91, 0xe5, 0x1b, 0x32, 0xd3, 0xed, 0x45, 0x6c, 0x1d,
		0x6b, 0x9f, 0x90, 0xce, 0xb2, 0x2e, 0x5a, 0xe5, 0x4a, 0xb5, 0x2c, 0xf6,
		0xb2, 0x7f, 0xf8, 0x19, 0x00, 0x00, 0xff, 0xff, 0x57, 0x93, 0x25, 0x73,
		0xdb, 0x01, 0x00, 0x00,
	}))

	if err != nil {
		panic("Decompression failed: " + err.Error())
	}

	var b bytes.Buffer
	io.Copy(&b, gz)
	gz.Close()

	return b.Bytes()
}

func init() {
	go_bindata["/aggregate.tmpl"] = aggregate_tmpl
}
