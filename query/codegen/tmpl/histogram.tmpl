{{define "histogram"}}
-- Checks if a value is a histogram.
function sky_is_histogram(histogram)
   return (histogram ~= nil and histogram.__histogram__ == true)
end

-- Creates a new histogram object.
function sky_histogram_new()
  return {__histogram__=true, min=0, max=0, count=0, width=0, bins={}, values={}}
end

-- Converts a histogram with values into a set of bins and clears the values.
function sky_histogram_finalize(histogram)
  table.sort(histogram.values)
  histogram.min, histogram.max = histogram.values[1], histogram.values[#histogram.values]

  histogram.count = math.ceil(math.sqrt(#histogram.values))
  if histogram.count == 0 then histogram.count = 1 end

  histogram.width = (histogram.max - histogram.min) / histogram.count
  if histogram.width == 0 then histogram.width = 1 end

  for i=0,histogram.count-1 do
    histogram.bins[i] = 0
  end

  histogram.values = nil
end

-- Inserts a value into an existing histogram.
function sky_histogram_insert(histogram, value)
  if histogram == nil or histogram.count == 0 then return end
  index = math.floor((value-histogram.min)/histogram.width)
  index = math.min(math.max(index, 0), histogram.count-1)
  histogram.bins[index] = histogram.bins[index] + 1
end

-- Merges one histogram into another. It's assumed that both histograms share
-- the same structure and bin count.
function sky_histogram_merge(a, b)
  if a == nil then
    a = b
  elseif b ~= nil then
    for i=0,a.count-1 do
      a.bins[i] = a.bins[i] + b.bins[i]
    end
  end
  return a
end

{{end}}

