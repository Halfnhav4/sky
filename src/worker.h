#ifndef _sky_worker_h
#define _sky_worker_h

#include <stdio.h>
#include <inttypes.h>
#include <stdbool.h>

typedef struct sky_worker sky_worker;

#include "bstring.h"
#include "servlet.h"
#include "tablet.h"


//==============================================================================
//
// Typedefs
//
//==============================================================================

// Defines a function that reads the worker data from a file stream.
typedef int (*sky_worker_read_func_t)(sky_worker *worker, FILE *input);

// Defines a function that maps tablet data to an output.
typedef int (*sky_worker_map_func_t)(sky_worker *worker, sky_tablet *tablet, void **data);

// Defines a function that frees data generated by the map function.
typedef int (*sky_worker_map_free_func_t)(void *data);

// Defines a function that reduces the output of the map function to a single
// output.
typedef int (*sky_worker_reduce_func_t)(sky_worker *worker, void *data);

// Defines a function that writes the worker data to a file stream.
typedef int (*sky_worker_write_func_t)(sky_worker *worker, FILE *output);

// Defines a function that frees any memory allocated by the worker functions.
typedef int (*sky_worker_free_func_t)(sky_worker *worker);

// The various states that the worker can be in.
typedef enum {
    SKY_WORKER_STATE_STOPPED = 0,
    SKY_WORKER_STATE_RUNNING = 1,
} sky_worker_state_e;

struct sky_worker {
    int64_t id;
    sky_worker_state_e state;
    sky_servlet **servlets;
    uint32_t servlet_count;
    void **push_sockets;
    uint32_t push_socket_count;
    void *pull_socket;
    bstring pull_socket_uri;
    void *context;
    FILE *input;
    FILE *output;
    sky_worker_read_func_t read;
    sky_worker_map_func_t map;
    sky_worker_map_free_func_t map_free;
    sky_worker_reduce_func_t reduce;
    sky_worker_write_func_t write;
    sky_worker_free_func_t free;
    pthread_t thread;
};


//==============================================================================
//
// Functions
//
//==============================================================================

//--------------------------------------
// Lifecycle
//--------------------------------------

sky_worker *sky_worker_create(uint64_t id);

void sky_worker_free(sky_worker *worker);

//--------------------------------------
// Servlet Management
//--------------------------------------

int sky_worker_set_servlets(sky_worker *worker, sky_servlet **servlets,
    uint32_t count);

//--------------------------------------
// State
//--------------------------------------

int sky_worker_start(sky_worker *worker);

#endif
